version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=echoops_user
      - DB_PASSWORD=echoops_password
      - DB_DATABASE=echoops_crm_db
      - JWT_SECRET=your-super-secret-jwt-key-here
      - JWT_EXPIRES_IN=24h
      - PORT=3000
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - echoops-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=echoops_crm_db
      - MYSQL_USER=echoops_user
      - MYSQL_PASSWORD=echoops_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - echoops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - echoops-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Frontend (if needed)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - echoops-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  echoops-network:
    driver: bridge
