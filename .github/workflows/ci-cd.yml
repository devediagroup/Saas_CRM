# 🚀 CI/CD Pipeline for EchoOps CRM
name: EchoOps CRM CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: echoops-crm

jobs:
  # Frontend Tests and Build
  frontend:
    name: 🎨 Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Lint code
      run: npm run lint

    - name: 🏗️ Build application
      run: npm run build:prod

    - name: 🧪 Run unit tests
      run: npm run test:coverage

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

    - name: 🔬 Bundle size analysis
      run: npm run bundle:optimize

    - name: 💾 Cache build artifacts
      uses: actions/cache@v3
      with:
        path: frontend/dist
        key: frontend-build-${{ github.sha }}
        restore-keys: |
          frontend-build-

  # Backend Tests and Build
  backend:
    name: 🏗️ Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Lint code
      run: npm run lint

    - name: 🏗️ Build application
      run: npm run build

    - name: 🧪 Run unit tests
      run: npm run test:cov
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USERNAME: test_user
        DB_PASSWORD: test_password
        DB_DATABASE: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test_jwt_secret
        JWT_REFRESH_SECRET: test_refresh_secret

    - name: 🔬 Run integration tests
      run: npm run test:e2e
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USERNAME: test_user
        DB_PASSWORD: test_password
        DB_DATABASE: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test_jwt_secret
        JWT_REFRESH_SECRET: test_refresh_secret

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend

  # E2E Tests
  e2e:
    name: 🔬 E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐳 Start application with Docker
      run: |
        cp .env.example .env
        docker-compose up -d --build
        sleep 60  # Wait for services to be ready

    - name: 🧪 Run E2E tests
      run: |
        cd frontend
        npm ci
        npm run test:e2e:ci

    - name: 📸 Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

    - name: 🎥 Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

    - name: 🧹 Cleanup
      if: always()
      run: docker-compose down

  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔐 Audit npm packages (Frontend)
      run: |
        cd frontend
        npm audit --audit-level=high

    - name: 🔐 Audit npm packages (Backend)
      run: |
        cd backend
        npm audit --audit-level=high

  # Docker Build and Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata (tags, labels)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏷️ Extract metadata (tags, labels)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐳 Start application
      run: |
        cp .env.example .env
        docker-compose up -d
        sleep 60

    - name: 🚀 Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: .lighthouseci/

  # Deployment
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production server
      run: |
        echo "🚀 Deploying to production..."
        # Add your deployment logic here
        # Example: SSH to server and run deployment script
        # ssh user@server 'bash -s' < deploy-production.sh
